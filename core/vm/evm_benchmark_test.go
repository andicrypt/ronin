package vm

import (
	"math/big"
	"math/rand"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"
)

type testSuite struct {
	setupTransactions   []transaction // The transactions run before benchmark loop
	prepareTransactions []transaction // The transactions run before each loop iteration
	benchTransactions   []transaction // The actual transactions need to be benchmarked
	contracts           []contractCode
}

type contractCode struct {
	code    []byte
	address common.Address
}

type transaction struct {
	from     common.Address
	to       common.Address
	input    []byte
	gasLimit uint64
	value    *big.Int
}

func benchmarkEVM(b *testing.B, suite *testSuite) {
	statedb, err := state.New(common.Hash{}, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
	if err != nil {
		b.Fatal(err)
	}

	for _, contract := range suite.contracts {
		statedb.SetCode(contract.address, contract.code)
	}

	evm := NewEVM(
		BlockContext{
			BlockNumber:   common.Big0,
			Transfer:      func(_ StateDB, _, _ common.Address, _ *big.Int) {},
			PublishEvents: make(PublishEventsMap),
		},
		TxContext{},
		statedb,
		&params.ChainConfig{
			EIP150Block: common.Big0,
			EIP155Block: common.Big0,
			EIP158Block: common.Big0,
			LondonBlock: common.Big0,
		},
		Config{},
	)

	for _, tx := range suite.setupTransactions {
		_, _, err := evm.Call(AccountRef(tx.from), tx.to, tx.input, tx.gasLimit, tx.value)
		if err != nil {
			b.Fatal(err)
		}
	}

	hasPrepareTranction := len(suite.prepareTransactions) != 0
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if hasPrepareTranction {
			b.StopTimer()
			for _, tx := range suite.prepareTransactions {
				_, _, err := evm.Call(AccountRef(tx.from), tx.to, tx.input, tx.gasLimit, tx.value)
				if err != nil {
					b.Fatal(err)
				}
			}
			b.StartTimer()
		}
		for _, tx := range suite.benchTransactions {
			_, _, err := evm.Call(AccountRef(tx.to), tx.to, tx.input, tx.gasLimit, tx.value)
			if err != nil {
				b.Fatal(err)
			}
		}
	}

}

func BenchmarkEvmInsertionSort(b *testing.B) {
	contractAbi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "uint256[]","name": "a","type": "uint256[]"}],"name": "insertionSort","outputs": [],"stateMutability": "pure","type": "function"}]`))
	rng := rand.New(rand.NewSource(0))
	const inputLen = 1_000
	input := make([]*big.Int, inputLen)
	for i := 0; i < inputLen; i++ {
		input[i] = big.NewInt(int64(rng.Int31()))
	}
	data, err := contractAbi.Pack("insertionSort", input)
	if err != nil {
		b.Fatal(err)
	}

	testAddress := common.BigToAddress(big.NewInt(0x204))
	suite := testSuite{
		benchTransactions: []transaction{
			{
				to:       testAddress,
				input:    data,
				gasLimit: 1_000_000_000,
				value:    common.Big0,
			},
		},
		contracts: []contractCode{
			{
				// https://github.com/Vectorized/solady/blob/678c9163550810b08f0ffb09624c9f7532392303/src/utils/LibSort.sol#L17
				code:    common.Hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c80636297206f14610030575b600080fd5b61004a60048036038101906100459190610264565b61004c565b005b8051600082528060051b82016020601f198185015b6001156100b65782810190508381116100b6578051828201805182811161008a575050506100b1565b5b6001156100a857808683015284820191508151905082811161008b575b82868301525050505b610061565b508385525050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610123826100da565b810181811067ffffffffffffffff82111715610142576101416100eb565b5b80604052505050565b60006101556100c1565b9050610161828261011a565b919050565b600067ffffffffffffffff821115610181576101806100eb565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6101aa81610197565b81146101b557600080fd5b50565b6000813590506101c7816101a1565b92915050565b60006101e06101db84610166565b61014b565b9050808382526020820190506020840283018581111561020357610202610192565b5b835b8181101561022c578061021888826101b8565b845260208401935050602081019050610205565b5050509392505050565b600082601f83011261024b5761024a6100d5565b5b813561025b8482602086016101cd565b91505092915050565b60006020828403121561027a576102796100cb565b5b600082013567ffffffffffffffff811115610298576102976100d0565b5b6102a484828501610236565b9150509291505056fea2646970667358221220c05eb12b713fde4b945bd660ddeda4dc91b0d11b4749c8bf02617b25bf3c022064736f6c63430008120033"),
				address: testAddress,
			},
		},
	}

	benchmarkEVM(b, &suite)
}

func BenchmarkEvmQuickSort(b *testing.B) {
	contractAbi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "uint256[]","name": "a","type": "uint256[]"}],"name": "sort","outputs": [],"stateMutability": "pure","type": "function"}]`))
	rng := rand.New(rand.NewSource(0))
	const inputLen = 1_000
	input := make([]*big.Int, inputLen)
	for i := 0; i < inputLen; i++ {
		input[i] = big.NewInt(int64(rng.Int31()))
	}
	data, err := contractAbi.Pack("sort", input)
	if err != nil {
		b.Fatal(err)
	}

	testAddress := common.BigToAddress(big.NewInt(0x204))
	suite := testSuite{
		benchTransactions: []transaction{
			{
				to:       testAddress,
				input:    data,
				gasLimit: 1_000_000_000,
				value:    common.Big0,
			},
		},
		contracts: []contractCode{
			{
				// https://github.com/Vectorized/solady/blob/3e8031b16417154dc2beae71b7b45f415d29566b/src/utils/LibSort.sol#L65
				code:    common.Hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c80639ec8b02614610030575b600080fd5b61004a60048036038101906100459190610442565b61004c565b005b601f196020825160008452604051600282106100fd578285018260051b8601815b858101518151118282141761008657858101905061006d565b818103610095575050506100fd565b8190505b868101518151116100ae578681019050610099565b8281036100eb575b6001156100e357825182518452808352878301925086840193508284106100dd57506100e3565b506100b6565b5050506100fd565b82845281868501526040840193505050505b6040515b808214610294576040820391508151848301516101808282031161019457858201805183511061013657805183518252808452505b5b60011561018c57868101905081811161018c578051888201805182811161016057505050610187565b5b60011561017e57808a8301528a8201915081519050828111610161575b828a8301525050505b610137565b50505061028f565b81601f1681830160061c60051b016101b7565b6000808291508390509250929050565b825182518082106101d1576101cc81836101a7565b925090505b82518181106101e9576101e481836101a7565b925090505b8083106101ff576101fa81846101a7565b935090505b8084528185528286525050508051829150835b600115610266575b60011561022f5788810190508051821161021a575b825b600115610246578a8101905080518310610231575b8093508382106102565750610266565b8151845183528085525050610212565b50508681018552818782011060061b85019450828552808786015282811160061b850194505050505b610101565b508185525050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610301826102b8565b810181811067ffffffffffffffff821117156103205761031f6102c9565b5b80604052505050565b600061033361029f565b905061033f82826102f8565b919050565b600067ffffffffffffffff82111561035f5761035e6102c9565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61038881610375565b811461039357600080fd5b50565b6000813590506103a58161037f565b92915050565b60006103be6103b984610344565b610329565b905080838252602082019050602084028301858111156103e1576103e0610370565b5b835b8181101561040a57806103f68882610396565b8452602084019350506020810190506103e3565b5050509392505050565b600082601f830112610429576104286102b3565b5b81356104398482602086016103ab565b91505092915050565b600060208284031215610458576104576102a9565b5b600082013567ffffffffffffffff811115610476576104756102ae565b5b61048284828501610414565b9150509291505056fea2646970667358221220f590ee27c624ceeb98c00b65f4e010837293405c27f985f82dbe000f5d583f7764736f6c63430008120033"),
				address: testAddress,
			},
		},
	}

	benchmarkEVM(b, &suite)
}

func BenchmarkEvmSignatureValidation(b *testing.B) {
	contractAbi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "address","name": "signer","type": "address"},{"internalType": "bytes32","name": "hash","type": "bytes32"},{"internalType": "bytes","name": "signature","type": "bytes"}],"name": "isValidSignatureNowCalldata","outputs": [{"internalType": "bool","name": "isValid","type": "bool"}],"stateMutability": "view","type": "function"}]`))
	key, _ := crypto.GenerateKey()
	hash := crypto.Keccak256Hash([]byte("AAAAA"))
	signature, err := crypto.Sign(hash[:], key)
	if err != nil {
		b.Fatal(err)
	}

	data, err := contractAbi.Pack("isValidSignatureNowCalldata", crypto.PubkeyToAddress(key.PublicKey), hash, signature)
	if err != nil {
		b.Fatal(err)
	}

	testAddress := common.BigToAddress(big.NewInt(0x204))
	suite := testSuite{
		benchTransactions: []transaction{
			{
				to:       testAddress,
				input:    data,
				gasLimit: 1_000_000_000,
				value:    common.Big0,
			},
		},
		contracts: []contractCode{
			{
				// https://github.com/Vectorized/solady/blob/3e8031b16417154dc2beae71b7b45f415d29566b/src/utils/SignatureCheckerLib.sol#L120
				code:    common.Hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c806340a35e2e14610030575b600080fd5b61004a60048036038101906100459190610263565b610060565b60405161005791906102f2565b60405180910390f35b60008460601b60601c945084156101585760405184600052604083036100cd576020840135601b8160ff1c0160205284356040528060011b60011c606052602060016080600060015afa805188183d15176100ca5760019350600060605282604052505050610158565b50505b6041830361011357604084013560001a602052604084604037602060016080600060015afa805187183d151761011157600192506000606052816040525050610158565b505b600060605280604052631626ba7e60e01b80825285600483015260248201604081528460448401528486606485013760208160648701858b5afa828251141693505050505b949350505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101958261016a565b9050919050565b6101a58161018a565b81146101b057600080fd5b50565b6000813590506101c28161019c565b92915050565b6000819050919050565b6101db816101c8565b81146101e657600080fd5b50565b6000813590506101f8816101d2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610223576102226101fe565b5b8235905067ffffffffffffffff8111156102405761023f610203565b5b60208301915083600182028301111561025c5761025b610208565b5b9250929050565b6000806000806060858703121561027d5761027c610160565b5b600061028b878288016101b3565b945050602061029c878288016101e9565b935050604085013567ffffffffffffffff8111156102bd576102bc610165565b5b6102c98782880161020d565b925092505092959194509250565b60008115159050919050565b6102ec816102d7565b82525050565b600060208201905061030760008301846102e3565b9291505056fea2646970667358221220e7aef4256acfe8a66e69b3302343656c8356cc59568106cad36b4994886104ec64736f6c63430008120033"),
				address: testAddress,
			},
		},
	}

	benchmarkEVM(b, &suite)
}

func BenchmarkEvmMulticallErcTransfer(b *testing.B) {
	const contractCall = 100
	var (
		contracts         []contractCode
		setupTransactions []transaction
		benchTransactions []transaction
		fromAddress       = common.Address{0x1}
		transferAmount    = common.Big1
	)

	// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/442886ed5ff8a0b9ab477b191f5238541ee6d772/contracts/proxy/transparent/TransparentUpgradeableProxy.sol
	// With additional setImplementation(address)
	transparentUpgradeableProxyCode := common.Hex2Bytes("6080604052600436106100225760003560e01c8063d784d4261461002d57610023565b5b61002b610056565b005b34801561003957600080fd5b50610054600480360381019061004f91906105b3565b61014a565b005b61005e610166565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361013f57634f1ef28660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610132576040517fd2b576ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61013a61018e565b610148565b6101476101c4565b5b565b61016381604051806020016040528060008152506101d6565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060003660049080926101a5939291906105ea565b8101906101b291906107a9565b915091506101c082826101d6565b5050565b6101d46101cf610249565b610258565b565b6101df8261027e565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a260008151111561023c57610236828261034b565b50610245565b6102446103cf565b5b5050565b600061025361040c565b905090565b3660008037600080366000845af43d6000803e8060008114610279573d6000f35b3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff163b036102da57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016102d19190610814565b60405180910390fd5b806103077f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610463565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff168460405161037591906108a0565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b50915091506103c585838361046d565b9250505092915050565b600034111561040a576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600061043a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610463565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000819050919050565b6060826104825761047d826104fc565b6104f4565b600082511480156104aa575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156104ec57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016104e39190610814565b60405180910390fd5b8190506104f5565b5b9392505050565b60008151111561050f5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061058082610555565b9050919050565b61059081610575565b811461059b57600080fd5b50565b6000813590506105ad81610587565b92915050565b6000602082840312156105c9576105c861054b565b5b60006105d78482850161059e565b91505092915050565b600080fd5b600080fd5b600080858511156105fe576105fd6105e0565b5b8386111561060f5761060e6105e5565b5b6001850283019150848603905094509492505050565b600061063082610555565b9050919050565b61064081610625565b811461064b57600080fd5b50565b60008135905061065d81610637565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106b68261066d565b810181811067ffffffffffffffff821117156106d5576106d461067e565b5b80604052505050565b60006106e8610541565b90506106f482826106ad565b919050565b600067ffffffffffffffff8211156107145761071361067e565b5b61071d8261066d565b9050602081019050919050565b82818337600083830152505050565b600061074c610747846106f9565b6106de565b90508281526020810184848401111561076857610767610668565b5b61077384828561072a565b509392505050565b600082601f8301126107905761078f610663565b5b81356107a0848260208601610739565b91505092915050565b600080604083850312156107c0576107bf61054b565b5b60006107ce8582860161064e565b925050602083013567ffffffffffffffff8111156107ef576107ee610550565b5b6107fb8582860161077b565b9150509250929050565b61080e81610575565b82525050565b60006020820190506108296000830184610805565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610863578082015181840152602081019050610848565b60008484015250505050565b600061087a8261082f565b610884818561083a565b9350610894818560208601610845565b80840191505092915050565b60006108ac828461086f565b91508190509291505056fea26469706673582212208b6255c39a222599451e0ede6aac38ebba92e8ce0aaa22d00d8078221bcbfa9a64736f6c63430008140033608060405234801561001057600080fd5b50604051610a2b380380610a2b833981810160405281019061003291906101e2565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c919061021e565b60405180910390fd5b6100b4816100bb60201b60201c565b5050610239565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101af82610184565b9050919050565b6101bf816101a4565b81146101ca57600080fd5b50565b6000815190506101dc816101b6565b92915050565b6000602082840312156101f8576101f761017f565b5b6000610206848285016101cd565b91505092915050565b610218816101a4565b82525050565b6000602082019050610233600083018461020f565b92915050565b6107e3806102486000396000f3fe60806040526004361061004a5760003560e01c8063715018a61461004f5780638da5cb5b146100665780639623609d14610091578063ad3cb1cc146100ad578063f2fde38b146100d8575b600080fd5b34801561005b57600080fd5b50610064610101565b005b34801561007257600080fd5b5061007b610115565b604051610088919061040c565b60405180910390f35b6100ab60048036038101906100a691906105eb565b61013e565b005b3480156100b957600080fd5b506100c26101b9565b6040516100cf91906106d9565b60405180910390f35b3480156100e457600080fd5b506100ff60048036038101906100fa91906106fb565b6101f2565b005b610109610278565b61011360006102ff565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610146610278565b8273ffffffffffffffffffffffffffffffffffffffff16634f1ef2863484846040518463ffffffff1660e01b815260040161018292919061077d565b6000604051808303818588803b15801561019b57600080fd5b505af11580156101af573d6000803e3d6000fd5b5050505050505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6101fa610278565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361026c5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610263919061040c565b60405180910390fd5b610275816102ff565b50565b6102806103c3565b73ffffffffffffffffffffffffffffffffffffffff1661029e610115565b73ffffffffffffffffffffffffffffffffffffffff16146102fd576102c16103c3565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102f4919061040c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103f6826103cb565b9050919050565b610406816103eb565b82525050565b600060208201905061042160008301846103fd565b92915050565b6000604051905090565b600080fd5b600080fd5b6000610446826103eb565b9050919050565b6104568161043b565b811461046157600080fd5b50565b6000813590506104738161044d565b92915050565b610482816103eb565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f8826104af565b810181811067ffffffffffffffff82111715610517576105166104c0565b5b80604052505050565b600061052a610427565b905061053682826104ef565b919050565b600067ffffffffffffffff821115610556576105556104c0565b5b61055f826104af565b9050602081019050919050565b82818337600083830152505050565b600061058e6105898461053b565b610520565b9050828152602081018484840111156105aa576105a96104aa565b5b6105b584828561056c565b509392505050565b600082601f8301126105d2576105d16104a5565b5b81356105e284826020860161057b565b91505092915050565b60008060006060848603121561060457610603610431565b5b600061061286828701610464565b935050602061062386828701610490565b925050604084013567ffffffffffffffff81111561064457610643610436565b5b610650868287016105bd565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610694578082015181840152602081019050610679565b60008484015250505050565b60006106ab8261065a565b6106b58185610665565b93506106c5818560208601610676565b6106ce816104af565b840191505092915050565b600060208201905081810360008301526106f381846106a0565b905092915050565b60006020828403121561071157610710610431565b5b600061071f84828501610490565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061074f82610728565b6107598185610733565b9350610769818560208601610676565b610772816104af565b840191505092915050565b600060408201905061079260008301856103fd565b81810360208301526107a48184610744565b9050939250505056fea26469706673582212206977b701ee9d9c20674a9b96d9b45f425db7e6883f4f8a31380ace2faa22509564736f6c63430008140033")
	transparentUpgradeableProxyAbi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "address","name": "newImplementation","type": "address"}],"name": "setImplementation","outputs": [],"stateMutability": "nonpayable","type": "function"}]`))

	/*
		// SPDX-License-Identifier: MIT
		// Compatible with OpenZeppelin Contracts ^5.0.0
		pragma solidity ^0.8.20;

		import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

		contract MyToken is ERC20 {
			constructor() ERC20("MyToken", "MTK") {}
			function mint(address to, uint256 amount) public {
				_mint(to, amount);
			}
		}
	*/

	erc20Code := common.Hex2Bytes("608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610b60565b60405180910390f35b6100db60048036038101906100d69190610c1b565b6102b9565b6040516100e89190610c76565b60405180910390f35b6100f96102dc565b6040516101069190610ca0565b60405180910390f35b61012960048036038101906101249190610cbb565b6102e6565b6040516101369190610c76565b60405180910390f35b610147610315565b6040516101549190610d2a565b60405180910390f35b61017760048036038101906101729190610c1b565b61031e565b005b610193600480360381019061018e9190610d45565b61032c565b6040516101a09190610ca0565b60405180910390f35b6101b1610374565b6040516101be9190610b60565b60405180910390f35b6101e160048036038101906101dc9190610c1b565b610406565b6040516101ee9190610c76565b60405180910390f35b610211600480360381019061020c9190610d72565b610429565b60405161021e9190610ca0565b60405180910390f35b60606003805461023690610de1565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610de1565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000806102c46104b0565b90506102d18185856104b8565b600191505092915050565b6000600254905090565b6000806102f16104b0565b90506102fe8582856104ca565b61030985858561055e565b60019150509392505050565b60006012905090565b6103288282610652565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461038390610de1565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90610de1565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050905090565b6000806104116104b0565b905061041e81858561055e565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6104c583838360016106d4565b505050565b60006104d68484610429565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105585781811015610548578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161053f93929190610e21565b60405180910390fd5b610557848484840360006106d4565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105d05760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105c79190610e58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106425760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106399190610e58565b60405180910390fd5b61064d8383836108ab565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106c45760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106bb9190610e58565b60405180910390fd5b6106d0600083836108ab565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107465760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161073d9190610e58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107b85760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016107af9190610e58565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156108a5578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161089c9190610ca0565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108fd5780600260008282546108f19190610ea2565b925050819055506109d0565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610989578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161098093929190610e21565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a195780600260008282540392505081905550610a66565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ac39190610ca0565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b0a578082015181840152602081019050610aef565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b3282610ad0565b610b3c8185610adb565b9350610b4c818560208601610aec565b610b5581610b16565b840191505092915050565b60006020820190508181036000830152610b7a8184610b27565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb282610b87565b9050919050565b610bc281610ba7565b8114610bcd57600080fd5b50565b600081359050610bdf81610bb9565b92915050565b6000819050919050565b610bf881610be5565b8114610c0357600080fd5b50565b600081359050610c1581610bef565b92915050565b60008060408385031215610c3257610c31610b82565b5b6000610c4085828601610bd0565b9250506020610c5185828601610c06565b9150509250929050565b60008115159050919050565b610c7081610c5b565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b610c9a81610be5565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b600080600060608486031215610cd457610cd3610b82565b5b6000610ce286828701610bd0565b9350506020610cf386828701610bd0565b9250506040610d0486828701610c06565b9150509250925092565b600060ff82169050919050565b610d2481610d0e565b82525050565b6000602082019050610d3f6000830184610d1b565b92915050565b600060208284031215610d5b57610d5a610b82565b5b6000610d6984828501610bd0565b91505092915050565b60008060408385031215610d8957610d88610b82565b5b6000610d9785828601610bd0565b9250506020610da885828601610bd0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610df957607f821691505b602082108103610e0c57610e0b610db2565b5b50919050565b610e1b81610ba7565b82525050565b6000606082019050610e366000830186610e12565b610e436020830185610c91565b610e506040830184610c91565b949350505050565b6000602082019050610e6d6000830184610e12565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ead82610be5565b9150610eb883610be5565b9250828201905080821115610ed057610ecf610e73565b5b9291505056fea26469706673582212205ce54b82643e084bfdf24ff19aa976d59d809adf665b4eb536ec6f4db3f3770764736f6c63430008140033")
	erc20Abi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "address","name": "spender","type": "address"},{"internalType": "uint256","name": "value","type": "uint256"}],"name": "approve","outputs": [{"internalType": "bool","name": "","type": "bool"}],"stateMutability": "nonpayable","type": "function"},{"inputs": [{"internalType": "address","name": "to","type": "address"},{"internalType": "uint256","name": "amount","type": "uint256"}],"name": "mint","outputs": [],"stateMutability": "nonpayable","type": "function"},{"inputs": [{"internalType": "address","name": "from","type": "address"},{"internalType": "address","name": "to","type": "address"},{"internalType": "uint256","name": "value","type": "uint256"}],"name": "transferFrom","outputs": [{"internalType": "bool","name": "","type": "bool"}],"stateMutability": "nonpayable","type": "function"}]`))
	for i := 0; i < contractCall; i++ {
		contracts = append(contracts, contractCode{
			code:    erc20Code,
			address: common.BigToAddress(big.NewInt(int64(0x200 + i))),
		})
	}

	for i := 0; i < contractCall; i++ {
		contracts = append(contracts, contractCode{
			code:    transparentUpgradeableProxyCode,
			address: common.BigToAddress(big.NewInt(int64(0x100 + i))),
		})
	}

	multicallAddr := common.BigToAddress(big.NewInt(int64(0x300)))
	// tryAggregate multicall2
	multicallCode := common.Hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bce38bd714610030575b600080fd5b61004a60048036038101906100459190610570565b610060565b6040516100579190610759565b60405180910390f35b6060815167ffffffffffffffff81111561007d5761007c610286565b5b6040519080825280602002602001820160405280156100b657816020015b6100a3610208565b81526020019060019003908161009b5790505b50905060005b8251811015610201576000808483815181106100db576100da61077b565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168584815181106101105761010f61077b565b5b60200260200101516020015160405161012991906107e6565b6000604051808303816000865af19150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b509150915085156101b757816101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90610880565b60405180910390fd5b5b60405180604001604052808315158152602001828152508484815181106101e1576101e061077b565b5b6020026020010181905250505080806101f9906108d9565b9150506100bc565b5092915050565b6040518060400160405280600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61024d81610238565b811461025857600080fd5b50565b60008135905061026a81610244565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102be82610275565b810181811067ffffffffffffffff821117156102dd576102dc610286565b5b80604052505050565b60006102f0610224565b90506102fc82826102b5565b919050565b600067ffffffffffffffff82111561031c5761031b610286565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103678261033c565b9050919050565b6103778161035c565b811461038257600080fd5b50565b6000813590506103948161036e565b92915050565b600080fd5b600067ffffffffffffffff8211156103ba576103b9610286565b5b6103c382610275565b9050602081019050919050565b82818337600083830152505050565b60006103f26103ed8461039f565b6102e6565b90508281526020810184848401111561040e5761040d61039a565b5b6104198482856103d0565b509392505050565b600082601f83011261043657610435610270565b5b81356104468482602086016103df565b91505092915050565b60006040828403121561046557610464610332565b5b61046f60406102e6565b9050600061047f84828501610385565b600083015250602082013567ffffffffffffffff8111156104a3576104a2610337565b5b6104af84828501610421565b60208301525092915050565b60006104ce6104c984610301565b6102e6565b905080838252602082019050602084028301858111156104f1576104f061032d565b5b835b8181101561053857803567ffffffffffffffff81111561051657610515610270565b5b808601610523898261044f565b855260208501945050506020810190506104f3565b5050509392505050565b600082601f83011261055757610556610270565b5b81356105678482602086016104bb565b91505092915050565b600080604083850312156105875761058661022e565b5b60006105958582860161025b565b925050602083013567ffffffffffffffff8111156105b6576105b5610233565b5b6105c285828601610542565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61060181610238565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610641578082015181840152602081019050610626565b60008484015250505050565b600061065882610607565b6106628185610612565b9350610672818560208601610623565b61067b81610275565b840191505092915050565b600060408301600083015161069e60008601826105f8565b50602083015184820360208601526106b6828261064d565b9150508091505092915050565b60006106cf8383610686565b905092915050565b6000602082019050919050565b60006106ef826105cc565b6106f981856105d7565b93508360208202850161070b856105e8565b8060005b85811015610747578484038952815161072885826106c3565b9450610733836106d7565b925060208a0199505060018101905061070f565b50829750879550505050505092915050565b6000602082019050818103600083015261077381846106e4565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b60006107c082610607565b6107ca81856107aa565b93506107da818560208601610623565b80840191505092915050565b60006107f282846107b5565b915081905092915050565b600082825260208201905092915050565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b600061086a6021836107fd565b91506108758261080e565b604082019050919050565b600060208201905081810360008301526108998161085d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006108e4826108cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610916576109156108a0565b5b60018201905091905056fea26469706673582212207bb58e10141d2179a1303521d47b9dfea9661384dc54778505ca58b301954d1764736f6c63430008140033")
	multicallAbi, _ := abi.JSON(strings.NewReader(`[{"inputs": [{"internalType": "bool","name": "_requireSuccess","type": "bool"},{"components": [{"internalType": "address","name": "target","type": "address"},{"internalType": "bytes","name": "callData","type": "bytes"}],"internalType": "struct Multicall2.Call[]","name": "_calls","type": "tuple[]"}],"name": "tryAggregate","outputs": [{"components": [{"internalType": "bool","name": "success","type": "bool"},{"internalType": "bytes","name": "returnData","type": "bytes"}],"internalType": "struct Multicall2.Result[]","name": "_returnData","type": "tuple[]"}],"stateMutability": "nonpayable","type": "function"}]`))
	contracts = append(contracts, contractCode{
		code:    multicallCode,
		address: multicallAddr,
	})

	for i := 0; i < contractCall; i++ {
		data, err := transparentUpgradeableProxyAbi.Pack("setImplementation", common.BigToAddress(big.NewInt(int64(0x200+i))))
		if err != nil {
			b.Fatal(err)
		}

		setupTransactions = append(setupTransactions, transaction{
			to:       common.BigToAddress(big.NewInt(int64(0x100 + i))),
			input:    data,
			gasLimit: 100_000_000,
			value:    common.Big0,
		})

		amount := new(big.Int).Mul(transferAmount, big.NewInt(int64(b.N)))
		data, err = erc20Abi.Pack("mint", fromAddress, amount)
		if err != nil {
			b.Fatal(err)
		}

		setupTransactions = append(setupTransactions, transaction{
			from:     fromAddress,
			to:       common.BigToAddress(big.NewInt(int64(0x100 + i))),
			input:    data,
			gasLimit: 100_000_000,
			value:    common.Big0,
		})

		data, err = erc20Abi.Pack("approve", multicallAddr, amount)
		if err != nil {
			b.Fatal(err)
		}

		setupTransactions = append(setupTransactions, transaction{
			from:     fromAddress,
			to:       common.BigToAddress(big.NewInt(int64(0x100 + i))),
			input:    data,
			gasLimit: 100_000_000,
			value:    common.Big0,
		})
	}

	type call struct {
		Target   common.Address
		CallData []byte
	}
	var aggregatedData []call
	for i := 0; i < contractCall; i++ {
		data, err := erc20Abi.Pack("transferFrom", fromAddress, common.Address{0x2}, transferAmount)
		if err != nil {
			b.Fatal(err)
		}

		aggregatedData = append(aggregatedData, call{
			Target:   common.BigToAddress(big.NewInt(int64(0x100 + i))),
			CallData: data,
		})
	}

	data, err := multicallAbi.Pack("tryAggregate", true, aggregatedData)
	if err != nil {
		b.Fatal(err)
	}
	benchTransactions = append(benchTransactions, transaction{
		from:     fromAddress,
		to:       multicallAddr,
		input:    data,
		gasLimit: 1_000_000_000,
		value:    common.Big0,
	})

	suite := testSuite{
		contracts:         contracts,
		setupTransactions: setupTransactions,
		benchTransactions: benchTransactions,
	}

	benchmarkEVM(b, &suite)
}
func BenchmarkEvmRedBlackTree(b *testing.B) {
	// Create random array of numbers and options
	// The "random" values are generated using a fixed seed for accurate comparison
	n := 10000
	bound := 1000
	var numbers []*big.Int
	var options []*big.Int
	var args []interface{}
	for i := 0; i < n; i++ {
		rng := rand.New(rand.NewSource(int64(i)))
		numbers = append(numbers, big.NewInt(int64(rng.Intn(bound))+1))
		options = append(options, big.NewInt(int64(rng.Intn(2)+1)))
	}
	args = append(args, numbers)
	args = append(args, options)

	// Pack data for ABI
	parsedABI, err := abi.JSON(strings.NewReader(
		`
	[
		{
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "numbers",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "options",
					"type": "uint256[]"
				}
			],
			"name": "process",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]
	`,
	))
	if err != nil {
		b.Fatalf("Failed to parse ABI: %v", err)
	}
	data, err := parsedABI.Pack("process", args...)
	if err != nil {
		b.Fatalf("Failed to pack data for ABI: %v", err)
	}

	// Contract code
	/*
		pragma solidity ^0.8.18;
		...
		// RBTree library - https://github.com/Vectorized/solady/blob/29d61c504425519c6deddc3e12c2e039ad43e8e3/test/RedBlackTree.t.sol#L4
		...
		contract OpcodeTest {
			using RedBlackTreeLib for *;
			RedBlackTreeLib.Tree tree;
			function process(uint256[] memory numbers, uint256[] memory options) external {
				for (uint256 i = 0; i < numbers.length; i++) {
					uint256 option = options[i];
					uint256 number = numbers[i];
					if (option == 1) {
						if (!tree.exists(number)) {
							tree.insert(number);
						}
					} else if (option == 2) {
						if (tree.exists(number)) {
							tree.remove(number);
						}
					}
				}
			}
		}
	*/
	contractString :=
		"608060405234801561001057600080fd5b506004361061002b5760003560e01c80636e476ea014610030575b600080fd5b61004361003e366004610987565b610045565b005b60005b82518110156100e1576000828281518110610065576100656109f0565b602002602001015190506000848381518110610083576100836109f0565b60200260200101519050816001036100b4576100a06000826100e6565b6100af576100af6000826100ff565b6100d7565b816002036100d7576100c76000826100e6565b156100d7576100d760008261011c565b5050600101610048565b505050565b6000806100f38484610128565b15159695505050505050565b600061010b83836101b0565b905080156100e1576100e1816101de565b600061010b83836101e8565b600080808361013e5761013e63c94f18776101de565b846020526801dc27bb5462fdadcb600052604060002060201b9250601f600152825460801c5b80156101a857809250808417548060601c806101865750848217638000000017545b8681036101975784935050506101a8565b8611511c637fffffff169050610164565b509250925092565b6000806000806101c08686610128565b9250925092506101d4838383886000610215565b9695505050505050565b806000526004601cfd5b60008060006101f78585610128565b925050915061020c8260008360006001610215565b95945050505050565b6000610896565b8082175480851c637fffffff16603e82901c637fffffff168382175480871c637fffffff16801561025f578086178054637fffffff603e1b1916603e89901b1790555b8261026d57836000526102a5565b8583178054808a1c637fffffff16890361029557637fffffff8a1b1916858a1b1790556102a5565b637fffffff8b1b1916858b1b1790555b637fffffff603e1b19637fffffff808b1b19969096169190991b178816603e84811b919091178787175593871b199716921b91909117949094169190921b17911755565b600083156102fc575063bb33e6ac6104b4565b600160205160801c01637fffffff81111561031e5763ed732d0c9150506104b4565b8060801b60205283603e1b6001605d1b178184176001600160a01b03881161034d57818860601b179150610357565b8763800000008217555b558361036657806000526103ab565b83831780548060601c8061037e575063800000008217545b80891061039e5750673fffffff800000001916601f83901b1790556103ab565b50637fffffff1916821790555b93506001605d1b5b60005185146104a55782851754603e1c637fffffff16808417548281166103db5750506104a5565b603e81901c637fffffff1685811754601f637fffffff8216851402601f811882821c637fffffff16808a175480891661047e5786841c637fffffff168d0361042c57879c5061042c84848f8e61021c565b8a8d1754603e1c637fffffff169750878b1754965088198716888c175561045a603e88637fffffff911c1690565b8b811780548b17905595506104718385888e61021c565b50505050505050506103b3565b88198716888c175588198116828c17555050505084811782881755508097505050506103b3565b60005183178119815416815550505b949350505050565b6001605d1b5b60005183146105fc5782821754808216156104dd57506105fc565b603e81901c637fffffff1683811754909150601f637fffffff8216861402601f811882821c637fffffff1680871754808716156105425786198116828917558685178689175561052f8484888b61021c565b505085841754821c637fffffff16808717545b80831c637fffffff168881175482861c637fffffff16808b17548083178b1661057b5750505050861790871755509194506104c2915050565b808b166105c4578a198316848d17558a8517868d175561059d8789888f61021c565b8b8a1754881c637fffffff168c811754909650945084881c637fffffff169150818c175490505b898c175498508885188b168518868d17558a1989168a8d17558a198116828d17555050505050506105f78282868961021c565b505050505b9117805491199091169055565b8161061657505060005250565b178054637fffffff601f81831695909514159490940293841b19169190921b179055565b600060205160801c831115610654575063ccd52fbc610890565b82610664575063b113638a610890565b818317548390637fffffff601f82901c81169116808202156106a0578192505b84831754637fffffff168061069957506106a0565b9250610684565b505082811754637fffffff81168015601f0282901c637fffffff169050603e82901c637fffffff168186178054637fffffff603e1b1916603e83901b1790556106eb84838389610609565b50858314610765578486175461070d8785603e84901c637fffffff1689610609565b637fffffff811686178054637fffffff603e1b1916603e86901b179055601f81901c637fffffff1686178054637fffffff603e1b1916603e86901b17905582186bffffffffffffffffffffffff168218858417559194915b816001605d1b1661077a5761077a81866104bc565b505060205160801c808417548060601c60008161079f57505063800000008583171754805b8487175460601c6000816107bb57505063800000008786171754805b8184146108665784878a17558083146107da5782878a17638000000017555b603e85901c637fffffff16806107f35787600052610814565b8981178054637fffffff8082168a1415601f028b811b91901b199091161790555b50601f85901c637fffffff16801561083e57808a178054637fffffff603e1b1916603e8a901b1790555b50637fffffff8516801561086457808a178054637fffffff603e1b1916603e8a901b1790555b505b50506000848817558015610881576000848817638000000017555b5050506000190160801b602052505b92915050565b386000528554601052816108b7576108b0838587896102e9565b90506108c4565b6108c1848761063a565b90505b601051865595945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108f957600080fd5b813567ffffffffffffffff811115610913576109136108d2565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715610940576109406108d2565b60405291825260208185018101929081018684111561095e57600080fd5b6020860192505b8383101561097d578235815260209283019201610965565b5095945050505050565b6000806040838503121561099a57600080fd5b823567ffffffffffffffff8111156109b157600080fd5b6109bd858286016108e8565b925050602083013567ffffffffffffffff8111156109da57600080fd5b6109e6858286016108e8565b9150509250929050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122060f7fd286cb5b1331bc5d1520a171917f649e24017f29882e087085a042e6a0c64736f6c634300081a0033"

	testContract := common.Hex2Bytes(contractString)
	testAddress := common.BigToAddress(big.NewInt(0x201))

	suite := testSuite{
		benchTransactions: []transaction{
			{
				to:       testAddress,
				input:    data,
				gasLimit: 100_000_000_000,
				value:    common.Big0,
			},
		},
		contracts: []contractCode{
			{
				code:    testContract,
				address: testAddress,
			},
		},
	}

	benchmarkEVM(b, &suite)
}
